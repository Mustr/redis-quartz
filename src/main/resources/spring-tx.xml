<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:aop="http://www.springframework.org/schema/aop"
      xmlns:tx="http://www.springframework.org/schema/tx"
		
      xsi:schemaLocation="
	  http://www.springframework.org/schema/beans 
	  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	  http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd
	  http://www.springframework.org/schema/aop 
	  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	  http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- 设置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- Connection Info -->
       <!--  <property name="driverClass" value="${jdbc.driver}" /> -->
        <property name="url" value="${jdbc.driverUrl}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->  
        <property name="maxActive" value="100" />
        <property name="initialSize" value="10" />
        <property name="minIdle" value="10" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000" />
        
        <!-- 使用非公平锁获取连接 -->
        <property name="useUnfairLock" value="true"/>
                
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="3600000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="3600000" />
    
        <property name="removeAbandoned" value="true" />
        <!-- 关闭长时间不使用的连接超时时间，单位秒 -->
        <property name="removeAbandonedTimeout" value="7200" />
        
        <!-- SELECT 'x' -->
        <property name="validationQuery" value="select 1" />
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis， 执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="false" />
        <!-- 是否缓存preparedStatement，也就是PSCache。 PSCache对支持游标的数据库性能提升巨大，比如说oracle。 在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。 5.5及以上版本有PSCache，建议开启。 -->
        <property name="poolPreparedStatements" value="true" />
        <!-- 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true。 在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些，比如说100 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100" />
        
        <!-- 属性类型是字符串，通过别名的方式配置扩展插件， 常用的插件有： 监控统计用的filter:stat  日志用的filter:log4j  防御sql注入的filter:wall -->  
        <property name="filters" value="stat" />
    </bean>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
	    <property name="dataSource" ref="dataSource" />  
	</bean> 
    
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
          <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
          <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
          <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
          <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
          <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
          <tx:method name="load*" propagation="REQUIRED" read-only="true"/>
          <tx:method name="*" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="txService" expression="(execution(* com.harry..*manager.*Manager*.*(..)) or execution(* com.harry..*manager.impl.*ManagerBase*.*(..)))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txService"/>
    </aop:config>
    
</beans>